# Generated by Django 5.1.3 on 2024-11-24 02:13

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('commits', 'Commits'), ('lines_of_code', 'Lines of Code')], max_length=20)),
                ('commitment_by', models.CharField(choices=[('daily', 'Daily'), ('accumulate', 'Accumulate')], max_length=20)),
                ('description', models.TextField()),
                ('target_value', models.PositiveIntegerField()),
                ('frequency', models.PositiveIntegerField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GitHubEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('event_type', models.CharField(max_length=50)),
                ('repo', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GitHubCommit',
            fields=[
                ('sha', models.CharField(db_index=True, max_length=100, primary_key=True, serialize=False, unique=True)),
                ('author', models.JSONField(default=dict)),
                ('committer', models.JSONField(default=dict)),
                ('date', models.DateField(null=True)),
                ('additions', models.PositiveIntegerField(default=0)),
                ('deletions', models.PositiveIntegerField(default=0)),
                ('changes', models.PositiveIntegerField(default=0)),
                ('message', models.TextField()),
                ('url', models.TextField()),
                ('github_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.githubevent')),
            ],
        ),
        migrations.CreateModel(
            name='GithubFileChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sha', models.CharField(db_index=True, max_length=100)),
                ('filename', models.TextField()),
                ('status', models.CharField(max_length=50)),
                ('additions', models.PositiveIntegerField(default=0)),
                ('deletions', models.PositiveIntegerField(default=0)),
                ('changes', models.PositiveIntegerField(default=0)),
                ('blob_url', models.TextField()),
                ('raw_url', models.TextField()),
                ('contents_url', models.TextField()),
                ('github_commit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.githubcommit')),
            ],
        ),
        migrations.CreateModel(
            name='UserChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('finish_date', models.DateField(blank=True, default=None, null=True)),
                ('progress', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('progress_detail', models.JSONField(default=dict)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
